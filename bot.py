from spicy import remember, encrypt_data, decrypt_data
import logging
import asyncio
import aiohttp
import telegram
import sqlite3 as sql
import requests
from telegram import Update, helpers, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, ChatInviteLink
from telegram.ext import Application, ContextTypes, MessageHandler, filters, CommandHandler, CallbackQueryHandler

## —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

DB = 'user.db' ##–ø—É—Ç—å –∫ –ë–î

async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE): ##–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mute
    chat_id = update.effective_chat.id
    user_name = update.effective_user.name
    user_id = update.effective_user.id
    con = sql.connect(DB)
    with con:
        cur = con.cursor()
        try:
            cur.execute(f"SELECT DISTINCT title FROM user WHERE NOT id_user = '{user_id}' or name = '{user_name}';") ##–ø—Ä–æ–≤–µ–∫—Ä–∫–∞ –≤ –ë–î
        except:
            await context.bot.send_message(chat_id, "–ù–µ –Ω–∞—à–µ–ª –≤–∞—Å –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ.")
            return False
        cur.execute("DELETE FROM user WHERE")
async def add_bot(update: Update, context: ContextTypes.DEFAULT_TYPE): ##–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_bot
    url = helpers.create_deep_linked_url('spicyeater_bot', "link", group=True)
    url += '&admin=post_messages'
    query = update.callback_query
    try:
        await query.edit_message_text(
            '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', url=url)], [InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='hellp')]]))
    except:
        await update.message.reply_text(
            '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', url=url)], [InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='hellp')]]))

async def add_people_1(update: Update, context: ContextTypes.DEFAULT_TYPE): ##–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_people
    user_id= str(update.effective_user.id)
    chat_id = update.effective_chat.id
    user_name = update.effective_user.name
    con = sql.connect(DB)

    with con:
        cur = con.cursor()
        try:
            cur.execute(f"SELECT DISTINCT title FROM user WHERE NOT id_user = '{user_id}' or name = '{user_name}';")##
            # print(cur.fetchall())
        except:
            await context.bot.send_message(chat_id, "–ù–µ –Ω–∞—à–µ–ª –≤–∞—Å –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /remember –≤ —á–∞—Ç–µ")
            return False
        w = []
        for i in cur.fetchall():
            w.append(i[0])
        masage = '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞'
        button = [[InlineKeyboardButton(i, callback_data=f'add_people_2 {i}')] for i in w] ##

        mark = InlineKeyboardMarkup(button)
        try:
            await update.callback_query.edit_message_text(masage, reply_markup=mark)
        except:
            await update.message.reply_text(masage, reply_markup=mark)

    # await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å ")
async def add_people_2(update: Update, context: ContextTypes.DEFAULT_TYPE): ##–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mute
    args = update.callback_query.data[13::]
    args = [k if k != " " else "_" for k in list(args)]
    args = "".join(args)
    con = sql.connect(DB)

    if args:
        with con:
            cur = con.cursor()
            try:
                cur.execute(f"SELECT DISTINCT id_chat FROM user WHERE title = '{args}';")
                chat = cur.fetchall()
            except:
                await context.bot.send_message(update.effective_chat.id,
                                               "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–æ–≥–æ—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —Ö–æ—Ç—è–±—ã —É –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /remember –≤ —á–∞—Ç–µ")
    link = context.bot.link + f'?start={args}_{chat[0][0]}'
    await update.callback_query.edit_message_text(f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {link}", reply_markup =
                                                  InlineKeyboardMarkup([[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]]))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): ##–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    args = context.args
    user = update.effective_user.name
    user_id = update.effective_user.id

    if args:
        args = args[0].split('_')
        chat = args[1]
        title = args[0]
        if not remember(user, user_id, chat, title):
            await context.bot.send_message(update.effective_chat.id,
                                           "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
        return
    masage = '‚öôÔ∏è –ú–µ–Ω—é ‚öôÔ∏è \n\n' \
             '‚Äî /add_people - –¥–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø—É üë•\n'\
            '‚Äî /mute - —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüîï\n'\
            '‚Äî /add_bot - –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞  ü§ñ\n'\
            '‚Äî /add_tag - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî\n'
    mark = InlineKeyboardMarkup([[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π', callback_data='add_people'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='mute')],
                                   [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞', callback_data='add_bot'), InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥', callback_data='add_tag')]])
    try:
        await update.callback_query.edit_message_text(masage,reply_markup= mark)
    except:
        await update.message.reply_text(masage, reply_markup=mark)

async def periodic_internet_check(interval_hours): ##–∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–µ–Ω–µ–Ω–∏—è
    while True:
        internet_connected = await check_internet_connection()
        if internet_connected:
            logger.info("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

        await asyncio.sleep(interval_hours * 3600)


async def check_internet_connection(): ##–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–µ–Ω–∏–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('http://www.google.com') as response: ##–æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ google
                return response.status == 200
    except aiohttp.ClientError:
        return False


def main() -> None:
    application = Application.builder().token("6572779723:AAGvYhji-PdqXZWj72E1lrAUjqOMYT5Tz0E").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start, pattern='^start$'))

    application.add_handler(MessageHandler(filters.Regex('^/add_people|–î–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π$'), add_people_1))
    application.add_handler(CallbackQueryHandler(add_people_1, '^add_people$'))

    application.add_handler(CallbackQueryHandler(add_people_2, pattern = 'add_people_2'))

    application.add_handler(MessageHandler(filters.Regex('^/mute|–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è$'), add_bot))
    application.add_handler(CallbackQueryHandler(add_bot, '^mute$'))

    application.add_handler(MessageHandler(filters.Regex('^/add_bot|–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞$'), add_bot))
    application.add_handler(CallbackQueryHandler(add_bot, '^add_bot$'))

    application.add_handler(MessageHandler(filters.Regex('^/add_tag|–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥$'), add_bot))
    application.add_handler(CallbackQueryHandler(add_bot, '^add_tag$'))

    application.add_handler(MessageHandler(filters.Regex('^/hellp|–ú–µ–Ω—é$'), start))
    application.add_handler(CallbackQueryHandler(start, '^hellp$'))

    loop = asyncio.get_event_loop()
    # loop.create_task(delete_mess(interval_hours=12)
    loop.create_task(periodic_internet_check(interval_hours=6)) ##–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
from spicy import remember
import logging
import asyncio
import aiohttp
import telegram
import re
import sqlite3 as sql
from telegram import Update, helpers, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, ChatInviteLink
from telegram.ext import Application, ContextTypes, MessageHandler, filters, CommandHandler, CallbackQueryHandler
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

DB = 'user.db' ##–ø—É—Ç—å –∫ –ë–î

async def periodic_internet_check(interval_hours): ##–∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–µ–Ω–µ–Ω–∏—è
    while True:
        internet_connected = await check_internet_connection()
        if internet_connected:
            logger.info("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

        await asyncio.sleep(interval_hours * 3600)


async def check_internet_connection(): ##–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–µ–Ω–∏–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('http://www.google.com') as response: ##–æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ google
                return response.status == 200
    except aiohttp.ClientError:
        return False

async def add_bot(update: Update, context: ContextTypes.DEFAULT_TYPE): ##–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_bot
    url = helpers.create_deep_linked_url('spicyeater_bot', "link", group=True)
    url += '&admin=post_messages'
    query = update.callback_query
    try:
        await query.edit_message_text(
            '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', url=url)], [InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='start')]]))
    except:
        await update.message.reply_text(
            '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞', url=url)], [InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='start')]]))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): ##–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    args = context.args
    user = update.effective_user.name
    user_id = update.effective_user.id

    if args:
        args = args[0].split('25zwV56')
        sear = re.search(r"(.*?)-", args[0])
        decode_spes = ''.join(chr(int(code)) for code in sear.group(1).split('I'))
        text = args[0].replace(sear.group(1), decode_spes)
        encoded_bytes = text.encode('ascii')
        args[0] = encoded_bytes.decode('punycode')
        chat = int(''.join(args[-1:]))
        title = " ".join(args[:-1])
        if not remember(user, user_id, chat, title):
            await context.bot.send_message(update.effective_chat.id,
                                           "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text= '–ù–∞–∑–∞–¥', callback_data=f'start')]]))
    else:
        masage = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—É–ø–ø—ã. –í–æ—Ç —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç:\n\n' \
                 'üìã –í—ã–±—Ä–∞—Ç—å –≥—É–ø–ø—É ‚Äî –≤—ã–±–µ—Ä–∏ –≥—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n\n' \
                 '‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ ‚Äî –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n\n' \
                 '‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n\n' \
                 'üí∞ –î–æ–Ω–∞—Ç ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–º–æ–≥–∏ –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ! \n\n' \
                 '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!'
        mark = InlineKeyboardMarkup([[InlineKeyboardButton(text='üìã–í—ã–±—Ä–∞—Ç—å –≥—É–ø–ø—É', callback_data='group_selection')],[InlineKeyboardButton(text='‚ûï–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞', callback_data='add_bot')],
                                       [InlineKeyboardButton(text='‚ÑπÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='suport'), InlineKeyboardButton(text='üîí–î–æ–Ω–∞—Ç', callback_data='donat')]])
        try:
            await update.callback_query.edit_message_text(masage,reply_markup= mark)
        except:
            await update.message.reply_text(masage, reply_markup=mark)

async def group_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id= str(update.effective_user.id)
    chat_id = update.effective_chat.id
    user_name = update.effective_user.name
    con = sql.connect(DB)

    with con:
        cur = con.cursor()
        try:
            cur.execute(f"SELECT DISTINCT title FROM user WHERE id_user = '{user_id}' or name = '{user_name}';")##
            # print(cur.fetchall())
        except:
            await context.bot.send_message(chat_id, "–ù–µ –Ω–∞—à–µ–ª –≤–∞—Å –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ")
            return False
        w = []
        for i in cur.fetchall():
            w.append(i[0])
        masage = 'üìã–í—ã–±—Ä–∏—Ç–µ –≥—É–ø–ø—É'
        button = [[InlineKeyboardButton(i, callback_data=f'group {i}')] for i in w]

        mark = InlineKeyboardMarkup(button)
        try:
            await update.callback_query.edit_message_text(masage, reply_markup=mark)
        except:
            await update.message.reply_text(masage, reply_markup=mark)

async def group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.callback_query.data[6::]
    information = f'{args}\n' \
                  f''
    markup =  InlineKeyboardMarkup([[InlineKeyboardButton(text= '–î–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π', callback_data=f'add_people {args}'),InlineKeyboardButton(text= '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data=f'notify   {args}')],
                                    [InlineKeyboardButton(text= '–í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã', callback_data=f'delete {args}'),InlineKeyboardButton(text= '–ù–∞–∑–∞–¥', callback_data=f'start')]])
    try:
        await update.callback_query.edit_message_text(information, reply_markup=markup)
    except:
        await update.message.reply_text(information, reply_markup=markup)

async def add_people(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.callback_query.data[11::]
    con = sql.connect(DB)

    if args:
        with con:
            cur = con.cursor()
            try:
                cur.execute(f"SELECT DISTINCT id_chat FROM user WHERE title = '{args}';")
                chat = cur.fetchall()
            except:
                await context.bot.send_message(update.effective_chat.id,
                                               "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–æ–≥–æ—Ç–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —Ö–æ—Ç—è–±—ã —É –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /remember –≤ —á–∞—Ç–µ")
    name_chat = args
    text = str(args.encode('punycode'))
    text = text[2:len(text) - 1]
    sear = re.search(r"(.*?)-", text)
    encode_spes = 'I'.join(str(ord(char)) for char in sear.group(1))
    text = text.replace(sear.group(1), encode_spes)
    text = ''.join(k if k != " " else "32I" for k in list(text))
    link = context.bot.link + f'?start={text}25zwV56{chat[0][0]}'
    await update.callback_query.edit_message_text(
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{link}", reply_markup=
        InlineKeyboardMarkup([[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'group {name_chat}')]]))

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    def confrim():
        con.execute(f"DELETE FROM user WHERE user_id = '{user_id}' and title = '{chat}';")
        con.commit()
    user_id = update.effective_user.id
    con = sql.connect(DB)
    chat = update.callback_query.data[7::]
    if update.callback_query.data.startswith('delete1'):
        confrim()
        await update.callback_query.edit_message_text("–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã", reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='start')]]))

    murkup = InlineKeyboardMarkup([[InlineKeyboardButton(text=f'–î–∞', callback_data=f'delete1{chat}'),
                                    InlineKeyboardButton(text=f'–ù–µ—Ç', callback_data=f'group {chat}')]])
    await update.callback_query.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã?", reply_markup= murkup)

async def notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    def chang(con):
        push_value = update.callback_query.data[8:9:]
        con.execute(f"UPDATE user SET push = {push_value} WHERE name = '{user}' and title = '{chat}';")
        con.commit()
    user = update.effective_user.name
    con = sql.connect(DB)
    chat = update.callback_query.data[9::]
    if update.callback_query.data.startswith('notify 1'):
        chang(con)
    elif update.callback_query.data.startswith('notify 2'):
        pass
    push_value = 0
    push_emojis = '‚úÖ'
    if con.execute(f"SELECT COUNT(*) FROM user WHERE name = '{user}' and title = '{chat}' and push = 0;").fetchone()[0] == 1:
        push_value = 1
        push_emojis = '‚ùå'
    con.close()
    murkup = InlineKeyboardMarkup(
        [[InlineKeyboardButton(text=f'{push_emojis}–£–ø–æ–º–µ–Ω—É—Ç—å –≤ —á–∞—Ç–µ', callback_data=f'notify 1{push_value}{chat}'),
          InlineKeyboardButton(text=f'üîí–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ', callback_data=f'notify 2{push_value}{chat}')],
         [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'group {chat}')]])
    await update.callback_query.edit_message_text("üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \n\n"
                                                  "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã"
                                                  "–£–ø–æ–º–µ–Ω—É—Ç—å –≤ —á–∞—Ç–µ - –≤–∞—à –Ω–∏–∫ –±—É–¥–µ—Ç —É–ø–æ–º—è–Ω—É—Ç –≤ —á–∞—Ç–µ"
                                                  "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ - –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —á—Ç–æ –≤–∞—Å —É–ø–æ–º—è–Ω—É–ª–∏", reply_markup=murkup)

async def suport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    murkup = InlineKeyboardMarkup([[InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/SuportAllBot?start=start')], [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='start')]])
    await update.callback_query.edit_message_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–∞–ª–∫–Ω—É–ª–∏—Å—å –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º. –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –∏ –¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        reply_markup=murkup)



def main() -> None:
    application = Application.builder().token("6572779723:AAGvYhji-PdqXZWj72E1lrAUjqOMYT5Tz0E").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start, pattern='start'))

    application.add_handler(MessageHandler(filters.Regex('^/add_bot|–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞$'), add_bot))
    application.add_handler(CallbackQueryHandler(add_bot, '^add_bot$'))

    application.add_handler(MessageHandler(filters.Regex('^/suport|–ü–æ–¥–¥–µ—Ä–∂–∫–∞$'), suport))
    application.add_handler(CallbackQueryHandler(suport, '^suport$'))

    application.add_handler(CommandHandler("group_selection", group_selection))
    application.add_handler(CallbackQueryHandler(group_selection, pattern='^group_selection'))

    application.add_handler(CallbackQueryHandler(group, pattern = 'group'))

    application.add_handler(CallbackQueryHandler(add_people, pattern='add_people'))


    application.add_handler(CallbackQueryHandler(notify, pattern='notify'))

    application.add_handler(CallbackQueryHandler(delete, pattern='delete'))

    loop = asyncio.get_event_loop()
    # loop.create_task(delete_mess(interval_hours=12)
    loop.create_task(periodic_internet_check(interval_hours=6)) ##–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()